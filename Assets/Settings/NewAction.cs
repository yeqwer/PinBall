//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Settings/NewAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NewAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @NewAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""NewAction"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""f01060b0-bd8f-4acb-8cb5-d4606ba24983"",
            ""actions"": [
                {
                    ""name"": ""FlipperL"",
                    ""type"": ""Button"",
                    ""id"": ""ad6bfadf-a77a-407e-b81a-0b8bd076c792"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FlipperR"",
                    ""type"": ""Button"",
                    ""id"": ""9298bdd4-e0ac-4cb5-9b4d-87c9b15b60d3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Plunger"",
                    ""type"": ""Value"",
                    ""id"": ""5cf6e426-dc38-475d-bda0-6a814889fca6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PunchL"",
                    ""type"": ""Button"",
                    ""id"": ""d8298db4-67bd-4a2d-8a10-3f506f8526b8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PunchR"",
                    ""type"": ""Button"",
                    ""id"": ""d089066a-17c1-477d-89f2-dcc85fd52a54"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""25a77c0f-944d-43e8-8517-9304b30dc327"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FlipperL"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c23d8616-45b0-4940-bcf5-ae660e41ecfe"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FlipperR"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""f448898a-37cb-456e-8cac-abfa80212a11"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Plunger"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""be95d3c0-ec8a-4bb8-af10-28fe9a554458"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Plunger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""464f5d6b-dbd5-4be2-8116-9c6044f4ce17"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Plunger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1be3e085-8710-4132-a1d3-2017a05dc132"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PunchL"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b92490be-bdf0-42dc-8301-70d8c5a3b221"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PunchR"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_FlipperL = m_Player.FindAction("FlipperL", throwIfNotFound: true);
        m_Player_FlipperR = m_Player.FindAction("FlipperR", throwIfNotFound: true);
        m_Player_Plunger = m_Player.FindAction("Plunger", throwIfNotFound: true);
        m_Player_PunchL = m_Player.FindAction("PunchL", throwIfNotFound: true);
        m_Player_PunchR = m_Player.FindAction("PunchR", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_FlipperL;
    private readonly InputAction m_Player_FlipperR;
    private readonly InputAction m_Player_Plunger;
    private readonly InputAction m_Player_PunchL;
    private readonly InputAction m_Player_PunchR;
    public struct PlayerActions
    {
        private @NewAction m_Wrapper;
        public PlayerActions(@NewAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @FlipperL => m_Wrapper.m_Player_FlipperL;
        public InputAction @FlipperR => m_Wrapper.m_Player_FlipperR;
        public InputAction @Plunger => m_Wrapper.m_Player_Plunger;
        public InputAction @PunchL => m_Wrapper.m_Player_PunchL;
        public InputAction @PunchR => m_Wrapper.m_Player_PunchR;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @FlipperL.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFlipperL;
                @FlipperL.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFlipperL;
                @FlipperL.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFlipperL;
                @FlipperR.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFlipperR;
                @FlipperR.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFlipperR;
                @FlipperR.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFlipperR;
                @Plunger.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPlunger;
                @Plunger.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPlunger;
                @Plunger.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPlunger;
                @PunchL.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPunchL;
                @PunchL.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPunchL;
                @PunchL.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPunchL;
                @PunchR.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPunchR;
                @PunchR.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPunchR;
                @PunchR.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPunchR;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @FlipperL.started += instance.OnFlipperL;
                @FlipperL.performed += instance.OnFlipperL;
                @FlipperL.canceled += instance.OnFlipperL;
                @FlipperR.started += instance.OnFlipperR;
                @FlipperR.performed += instance.OnFlipperR;
                @FlipperR.canceled += instance.OnFlipperR;
                @Plunger.started += instance.OnPlunger;
                @Plunger.performed += instance.OnPlunger;
                @Plunger.canceled += instance.OnPlunger;
                @PunchL.started += instance.OnPunchL;
                @PunchL.performed += instance.OnPunchL;
                @PunchL.canceled += instance.OnPunchL;
                @PunchR.started += instance.OnPunchR;
                @PunchR.performed += instance.OnPunchR;
                @PunchR.canceled += instance.OnPunchR;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnFlipperL(InputAction.CallbackContext context);
        void OnFlipperR(InputAction.CallbackContext context);
        void OnPlunger(InputAction.CallbackContext context);
        void OnPunchL(InputAction.CallbackContext context);
        void OnPunchR(InputAction.CallbackContext context);
    }
}
